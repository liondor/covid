{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","App.js","index.js","App.module.css","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","IMG/corona.png"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","Box","component","className","styles","container","Grid","spacing","justify","item","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","changeableUrl","axios","get","console","log","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChar","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","key","App","state","fetchedData","setState","this","image","src","corona","alt","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a1052fc2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__1slV2\",\"card\":\"Cards_card__3Si_J\",\"infected\":\"Cards_infected__2H50E\",\"recovered\":\"Cards_recovered__3hsIB\",\"deaths\":\"Cards_deaths__1IWUz\"};","import React from 'react';\r\nimport {Box, Card, CardContent, Typography, Grid} from '@material-ui/core';\r\nimport styles from './Cards.module.css'\r\nimport CountUp from 'react-countup';\r\nimport cx from \"classnames\";\r\nconst Cards = ({data:{confirmed, recovered, deaths, lastUpdate}}) => {\r\n    if(!confirmed)\r\n    {\r\n        return 'Loading....'\r\n    }\r\n    return (\r\n        <Box component={\"div\"} className={styles.container}>\r\n            <Grid container spacing={3} justify={\"center\"}>\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card,styles.infected)}>\r\n                    <CardContent>\r\n                        <Typography color={\"textSecondary\"} gutterBottom>\r\n                          Cas confirmés\r\n                        </Typography>\r\n                        <Typography variant={\"h5\"} >\r\n                            <CountUp\r\n                                start={0}\r\n                                end={confirmed.value}\r\n                                duration={2.5}\r\n                                separator={\",\"}\r\n\r\n                            />\r\n                        </Typography>\r\n                        <Typography color={\"textSecondary\"}>\r\n                            {new Date(lastUpdate).toDateString()}\r\n                        </Typography>\r\n                        <Typography variant={\"body2\"}>\r\n                            Nombre de cas confirmés de COVID-19\r\n                        </Typography>\r\n                    </CardContent>\r\n\r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card,styles.recovered)}>\r\n                    <CardContent>\r\n                        <Typography color={\"textSecondary\"} gutterBottom>\r\n                            Guérisons\r\n                        </Typography>\r\n                        <Typography variant={\"h5\"} >\r\n                            <CountUp\r\n                                start={0}\r\n                                end={recovered.value}\r\n                                duration={2.5}\r\n                                separator={\",\"}\r\n\r\n                            />\r\n                        </Typography>\r\n                        <Typography color={\"textSecondary\"}>\r\n                            {new Date(lastUpdate).toDateString()}\r\n                        </Typography>\r\n                        <Typography variant={\"body2\"}>\r\n                            Nombre de personnes ayant guéris du COVID-19\r\n                        </Typography>\r\n                    </CardContent>\r\n\r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card,styles.deaths)}>\r\n\r\n                <CardContent>\r\n                        <Typography color={\"textSecondary\"} gutterBottom>\r\n                           Décès\r\n                        </Typography>\r\n                        <Typography variant={\"h5\"} >\r\n                            <CountUp\r\n                                start={0}\r\n                                end={deaths.value}\r\n                                duration={2.5}\r\n                                separator={\",\"}\r\n\r\n                            />\r\n                        </Typography>\r\n                        <Typography color={\"textSecondary\"}>\r\n                            {new Date(lastUpdate).toDateString()}\r\n                        </Typography>\r\n                        <Typography variant={\"body2\"}>\r\n                            Nombre de décès dû au COVID-19\r\n                        </Typography>\r\n                    </CardContent>\r\n\r\n                </Grid>\r\n            </Grid>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default Cards;","import axios from 'axios';\r\nconst url = 'https://covid19.mathdro.id/api'\r\n\r\nexport const fetchData = async(country) => {\r\n    let changeableUrl = url;\r\n    if(country) {\r\n        changeableUrl= `${url}/countries/${country}`\r\n    }\r\n    try {\r\n        const {data: {confirmed, recovered, deaths, lastUpdate}} = await axios.get(changeableUrl);\r\n\r\n     return {\r\n         confirmed,\r\n         recovered,\r\n         deaths,\r\n         lastUpdate\r\n     };\r\n    }catch (e) {\r\n        console.log(e)\r\n\r\n    }\r\n\r\n}\r\n\r\nexport const fetchDailyData = async () => {\r\n    try {\r\n        const { data } = await axios.get(`${url}/daily`);\r\n        const modifiedData = data.map((dailyData) => ({\r\n          confirmed: dailyData.confirmed.total,\r\n          deaths: dailyData.deaths.total,\r\n            date: dailyData.reportDate\r\n        }))\r\n        return modifiedData;\r\n    } catch(e)\r\n    {\r\n        console.log(e)\r\n\r\n    }\r\n}\r\nexport const fetchCountries = async () =>{\r\n    try {\r\n        const {data: {countries}} = await axios.get(`${url}/countries`);\r\n\r\n        return countries.map((country) => country.name);\r\n    }catch (e) {\r\n        console.log(e)\r\n\r\n    }\r\n}","import React, {useState, useEffect} from 'react';\r\nimport {fetchDailyData} from \"../../api\";\r\nimport {Line, Bar} from 'react-chartjs-2';\r\nimport styles from'./Chart.module.css';\r\nimport {Box} from '@material-ui/core'\r\n\r\nconst Chart = ({data: {confirmed, recovered, deaths}, country}) => {\r\n    const [dailyData, setDailyData] = useState([]);\r\n    useEffect(() => {\r\n        const fetchAPI = async()=> {\r\n            setDailyData(await fetchDailyData());\r\n        }\r\n        fetchAPI();\r\n        }, [setDailyData]);\r\n\r\n    const lineChart = (\r\n        dailyData.length ? (<Line\r\n            data={{\r\n                labels:dailyData.map(({date}) => date),\r\n                datasets: [{\r\n                    data: dailyData.map(({confirmed})=>confirmed),\r\n                    label:'Cas confirmés',\r\n                    borderColor:'#3333FF',\r\n                    fill:true,\r\n                },\r\n                    {\r\n                    data: dailyData.map(({deaths})=>deaths),\r\n                    label:'Décès',\r\n                    borderColor:'red',\r\n                    backgroundColor:'rgba(255,0,0,0.5)',\r\n                    fill:true,\r\n                }]\r\n            }}\r\n        />):null\r\n    );\r\n    const barChar = (\r\n        confirmed\r\n            ? (\r\n            <Bar\r\n            data={{\r\n                labels:['Cas confirmés', \"Guérisons\", \"Décès\"],\r\n                datasets: [{\r\n                    label:'Victimes',\r\n                    backgroundColor: [\r\n                        'rgba(0,0,255,0.5)',\r\n                        'rgba(0,255,0,0.5)',\r\n                        'rgba(255,0,0,0.5)'\r\n                    ],\r\n                    data:[confirmed.value, recovered.value, deaths.value]\r\n                }]\r\n            }}\r\n            options={{\r\n                legend:{display:false},\r\n                title:{display:true, text:` Situation en ${country}`},\r\n            }}\r\n            />\r\n            ): null\r\n\r\n\r\n    );\r\n    return (\r\n\r\n        <Box className={styles.container}>\r\n            {country? barChar:lineChart}\r\n        </Box>\r\n    )\r\n};\r\n\r\nexport default Chart;","import React, {useState, useEffect} from 'react';\r\nimport {NativeSelect, FormControl} from '@material-ui/core'\r\nimport styles from './CountryPicker.module.css'\r\nimport {fetchCountries} from \"../../api\";\r\n\r\nconst CountryPicker = ({handleCountryChange}) => {\r\n    const [fetchedCountries, setFetchedCountries] = useState([]);\r\n    useEffect(() => {\r\n        const fetchAPI = async () => {\r\n            setFetchedCountries(await fetchCountries());\r\n        }\r\n        fetchAPI();\r\n    }, [1]);\r\n\r\n    console.log(fetchedCountries)\r\n    return (\r\n        <FormControl className={styles.formControl}>\r\n            <NativeSelect defaultValue={\"\"} onChange={(e) => handleCountryChange(e.target.value)}>\r\n                <option value={\"\"}> Global</option>\r\n                {fetchedCountries.map((country, key) => <option key={key} value={country}>{country}</option>)}\r\n            </NativeSelect>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport default CountryPicker;","import React from 'react';\r\nimport {Cards, Chart, CountryPicker} from './components'\r\nimport styles from './App.module.css'\r\nimport {fetchData} from './api';\r\nimport corona from './IMG/corona.png'\r\nclass App extends React.Component {\r\n    state= {\r\n        data: {},\r\n        country: '',\r\n\r\n    }\r\n    async componentDidMount() {\r\n        const fetchedData = await fetchData();\r\n        this.setState({data:fetchedData});\r\n    }\r\n    handleCountryChange = async (country) => {\r\n        const fetchedData = await fetchData(country);\r\n        this.setState({data:fetchedData, country:country});\r\n    }\r\n\r\n    render() {\r\n        const {data, country} = this.state;\r\n        return (\r\n            <div className={styles.container}>\r\n                <img className={styles.image} src={corona} alt={'Covid-19'}/>\r\n                <Cards data={data}/>\r\n                <CountryPicker handleCountryChange={this.handleCountryChange}/>\r\n                <Chart data={data} country={country}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1be-v\",\"image\":\"App_image__2jwVy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__w7l25\",\"card\":\"Chart_card__1gBxC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__3qBtk\"};","module.exports = __webpack_public_path__ + \"static/media/corona.d7265326.png\";"],"sourceRoot":""}